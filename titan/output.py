from titan.myimports import *

def amberlib_cpc(name,charge):
    """ generate *.lib for amber output """
    libfile = open(name+".lib", "w")
    libfile.write("!!index array str \n")
    libfile.write(" \"CRP\" \n")
    libfile.write(" \"CRN\" \n")
    libfile.write("!entry.CRP.unit.atoms table  str name  str type  int typex  int resx  int flags  int seq  int elmnt  dbl chg \n")
    libfile.write(" \"HPC\" \"DP\" 0 1 131075 1 1 %9.8f} \n" %(charge))
    libfile.write("!entry.CRP.unit.atomspertinfo table  str pname  str ptype  int ptypex  int pelmnt  dbl pchg \n")
    libfile.write(" \"HPC\" \"DP\" 0 -1 0.0 \n")
    libfile.write("!entry.CRP.unit.boundbox array dbl \n")
    libfile.write(" -1.000000 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write("!entry.CRP.unit.childsequence single int \n")
    libfile.write(" 2 \n")
    libfile.write("!entry.CRP.unit.connect array int \n")
    libfile.write(" 0 \n")
    libfile.write(" 0 \n")
    libfile.write("!entry.CRP.unit.hierarchy table  str abovetype  int abovex  str belowtype  int belowx \n")
    libfile.write(" \"U\" 0 \"R\" 1 \n")
    libfile.write(" \"R\" 1 \"A\" 1 \n")
    libfile.write("!entry.CRP.unit.name single str \n")
    libfile.write(" \"default_name\" \n")
    libfile.write("!entry.CRP.unit.positions table  dbl x  dbl y  dbl z \n")
    libfile.write(" 0.0 0.0 0.0 \n")
    libfile.write("!entry.CRP.unit.residueconnect table  int c1x  int c2x  int c3x  int c4x  int c5x  int c6x \n")
    libfile.write(" 0 0 0 0 0 0 \n")
    libfile.write("!entry.CRP.unit.residues table  str name  int seq  int childseq  int startatomx  str restype  int imagingx \n")
    libfile.write(" \"CRP\" 1 2 1 \"?\" 0 \n")
    libfile.write("!entry.CRP.unit.residuesPdbSequenceNumber array int \n")
    libfile.write(" 1 \n")
    libfile.write("!entry.CRP.unit.solventcap array dbl \n")
    libfile.write(" -1.000000 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write("!entry.CRP.unit.velocities table  dbl x  dbl y  dbl z \n")
    libfile.write(" 0.0 0.0 0.0 \n")
    libfile.write("!entry.CRN.unit.atoms table  str name  str type  int typex  int resx  int flags  int seq  int elmnt  dbl chg \n")
    charge = (-1.0000)*charge
    libfile.write(" \"HNC\" \"DN\" 0 1 131075 1 1 %10.8f \n"%(charge))
    libfile.write("!entry.CRN.unit.atomspertinfo table  str pname  str ptype  int ptypex  int pelmnt  dbl pchga \n")
    libfile.write(" \"HNC\" \"DN\" 0 -1 0.0 \n")
    libfile.write("!entry.CRN.unit.boundbox array dbl \n")
    libfile.write(" -1.000000 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write("!entry.CRN.unit.childsequence single int \n")
    libfile.write(" 2 \n")
    libfile.write("!entry.CRN.unit.connect array int \n")
    libfile.write(" 0 \n")
    libfile.write(" 0 \n")
    libfile.write("!entry.CRN.unit.hierarchy table  str abovetype  int abovex  str belowtype  int belowx \n")
    libfile.write(" \"U\" 0 \"R\" 1 \n")
    libfile.write(" \"R\" 1 \"A\" 1 \n")
    libfile.write("!entry.CRN.unit.name single str \n")
    libfile.write(" \"default_name\" \n")
    libfile.write("!entry.CRN.unit.positions table  dbl x  dbl y  dbl z \n")
    libfile.write(" 0.0 0.0 0.0 \n")
    libfile.write("!entry.CRN.unit.residueconnect table  int c1x  int c2x  int c3x  int c4x  int c5x  int c6x \n")
    libfile.write(" 0 0 0 0 0 0 \n")
    libfile.write("!entry.CRN.unit.residues table  str name  int seq  int childseq  int startatomx  str restype  int imagingx \n")
    libfile.write(" \"CRN\" 1 2 1 \"?\" 0 \n")
    libfile.write("!entry.CRN.unit.residuesPdbSequenceNumber array int \n")
    libfile.write(" 1 \n")
    libfile.write("!entry.CRN.unit.solventcap array dbl \n")
    libfile.write(" -1.000000 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write(" 0.0 \n")
    libfile.write("!entry.CRN.unit.velocities table  dbl x  dbl y  dbl z \n")
    libfile.write(" 0.0 0.0 0.0 \n")
    libfile.close()

def amberfrcmod_cpc(name):
    """generate *.frcmod for amber output"""
    frcmodfile = open(name+".frcmod", "w")
    frcmodfile.write("DUMMY ATOM WITH POSITIVE AND NEGATIVE CHARGES \n")
    frcmodfile.write("MASS \n")
    frcmodfile.write("DP        0.0000   0.0000 \n")
    frcmodfile.write("DN        0.0000   0.0000 \n")
    frcmodfile.write(" \n")
    frcmodfile.write("BOND \n")
    frcmodfile.write(" \n")
    frcmodfile.write("ANGLE \n")
    frcmodfile.write(" \n")
    frcmodfile.write("DIHE \n")
    frcmodfile.write(" \n")
    frcmodfile.write("IMPROPER \n")
    frcmodfile.write(" \n")
    frcmodfile.write("NONBON \n")
    frcmodfile.write("DP        0.0000   0.0000 \n")
    frcmodfile.write("DN        0.0000   0.0000 \n")
    frcmodfile.close()
#
def amberleapin_cpc(name):
    """generate *.in for amber output"""
    leap = open("leap.in", "w")
    leap.write("source leaprc.ff99SB \n")
    leap.write("lib = loadoff %.10s.lib \n"%(name))
    leap.write("check lib \n")
    leap.write("frcmod = loadamberparams %.10s.frcmod \n"%(name))
    leap.write("SCPC = loadpdb %.10s.pdb \n"%(name))
    leap.write("saveamberparm SCPC %.10s.prmtop %.10s.inpcrd \n" %(name,name))
    leap.write("savepdb SCPC %.10s_amber.pdb \n" %(name))
    leap.write("quit \n")
    leap.close()
